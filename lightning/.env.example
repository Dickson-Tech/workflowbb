CADDY_DATA_FOLDER=./caddy/data
CADDY_CONFIG_FOLDER=./caddy/config

# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# You should generate a random string of 64+ characters for this value in prod.
# You can generate a secure secret by running: ./run secret
SECRET_KEY_BASE=please_generate_a_more_secure_unique_secret_value_for_your_project

# Which environment is running? MIX_ENV should be "dev" or "prod" and NODE_ENV
# should be "production" or "development". When MIX_ENV is set to prod you'll
# automatically be set to build and run releases instead of using mix.
#MIX_ENV=prod
#NODE_ENV=production
MIX_ENV=dev
NODE_ENV=development

# Override the default log level
# Must be a valid level, see: https://hexdocs.pm/logger/1.12.3/Logger.html#module-levels
#LOG_LEVEL=debug

# Disable SSL connections for Postgres
# In production mode, SSL connections are enforced by default - uncomment to 
# disable this behaviour.
#DISABLE_DB_SSL=true

# The URL that will be generated through out your app. When you combine all 3
# values it should be the URL that visitors access in their browser / client.
#URL_SCHEME=https
#URL_HOST=
#URL_PORT=443
URL_SCHEME=http
URL_HOST=localhost
URL_PORT=4000

# If you're using a CDN you can customize which URL gets used for your static
# files. If left commented out it will fall back to using your URL_HOST.
#URL_STATIC_HOST=

# The bind port for cowboy (web server).
PORT=4000

# The origins from which you want to allow requests (comma separated)
ORIGINS=//localhost:*

# You can configure error reporting via Sentry by providing a DSN.
# SENTRY_DSN=https://some-url.ingest.sentry.io/some-id

# You'll always want to set POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_HOST=postgres
#POSTGRES_PORT=5432
POSTGRES_DB="lightning_${MIX_ENV}"

# Set the database url for Lightning, by default it's derived from the
# database settings above
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT:-5432}/${POSTGRES_DB}"

# Should Docker restart your containers if they go down in unexpected ways?
#DOCKER_RESTART_POLICY=unless-stopped
DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:4000/health_check
DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 4000 then you
# can either stop that process or change 4000 to be something else.
#
# Use the default in production to avoid having it directly accessible to
# the internet without assistance from a cloud based firewall.
LIGHTNING_EXTERNAL_PORT=127.0.0.1:4000
# LIGHTNING_EXTERNAL_PORT=4000
LIGHTNING_LISTEN_ADDRESS=0.0.0.0

# What volume path should be used? In dev we want to volume mount everything
# so we can develop our code without rebuilding our Docker images.
# Note that by mounting the whole project into the container, you will need to
# follow the Contributing steps in the README.
LIGHTNING_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#DOCKER_POSTGRES_CPUS=0
#DOCKER_POSTGRES_MEMORY=0
#DOCKER_WEB_CPUS=0
#DOCKER_WEB_MEMORY=0